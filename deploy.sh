#!/bin/bash

# 🚀 Home Assistant Stundenplan Card - Build & Deploy Script
# Baut die Card, committed zu Git und erstellt Release für HACS

set -e  # Exit bei Fehlern

# Farben für Output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funktionen
log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Header
echo -e "${BLUE}"
echo "╔══════════════════════════════════════════════════════╗"
echo "║         🏠 HA Stundenplan Card Deployment            ║"
echo "║              Build → Git → HACS Ready                ║"
echo "╚══════════════════════════════════════════════════════╝"
echo -e "${NC}"

# Prüfe ob wir im richtigen Verzeichnis sind
if [ ! -f "package.json" ]; then
    log_error "package.json nicht gefunden. Sind Sie im Projektverzeichnis?"
    exit 1
fi

# Prüfe Git Repository
if [ ! -d ".git" ]; then
    log_warning "Kein Git Repository gefunden. Initialisiere..."
    git init
    log_success "Git Repository initialisiert"
fi

# Lese aktuelle Version aus package.json
CURRENT_VERSION=$(grep '"version"' package.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
log_info "Aktuelle Version: $CURRENT_VERSION"

# Frage nach neuer Version
echo ""
read -p "🏷️  Neue Version (aktuell: $CURRENT_VERSION, Enter für Auto-Increment): " NEW_VERSION

if [ -z "$NEW_VERSION" ]; then
    # Auto-increment patch version
    IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
    MAJOR=${VERSION_PARTS[0]}
    MINOR=${VERSION_PARTS[1]}
    PATCH=${VERSION_PARTS[2]}
    NEW_PATCH=$((PATCH + 1))
    NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
fi

log_info "Neue Version wird: $NEW_VERSION"

# Update package.json version
log_info "Aktualisiere package.json Version..."
sed -i.bak "s/\"version\": *\"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" package.json
rm -f package.json.bak
log_success "Version in package.json aktualisiert"

# Update hacs.json version
if [ -f "hacs.json" ]; then
    log_info "Aktualisiere hacs.json Version..."
    sed -i.bak "s/\"version\": *\"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" hacs.json
    rm -f hacs.json.bak
    log_success "Version in hacs.json aktualisiert"
fi

# Prüfe Node.js Installation
if command -v node &> /dev/null; then
    log_info "Installiere Dependencies..."
    npm install
    log_success "Dependencies installiert"
    
    log_info "Baue Card..."
    npm run build
    
    if [ -f "dist/ha-stundenplan-card.js" ]; then
        log_success "Card erfolgreich gebaut!"
        
        # Kopiere für HACS ins Root-Verzeichnis
        cp dist/ha-stundenplan-card.js ./
        log_success "Card für HACS ins Root-Verzeichnis kopiert"
        
        # Zeige Dateigröße
        SIZE=$(wc -c < "dist/ha-stundenplan-card.js")
        SIZE_KB=$((SIZE / 1024))
        log_info "Größe der gebauten Card: ${SIZE_KB}KB"
    else
        log_error "Build fehlgeschlagen!"
        exit 1
    fi
else
    log_warning "Node.js nicht installiert. Verwende Pre-Built Version..."
    if [ ! -f "dist/ha-stundenplan-card.js" ]; then
        log_error "Keine gebaute Card gefunden und Node.js nicht verfügbar!"
        exit 1
    fi
fi

# Git Status prüfen
echo ""
log_info "Git Status:"
git status --porcelain

# Add alle Änderungen
log_info "Füge Änderungen zu Git hinzu..."
git add .

# Commit Message
COMMIT_MSG="🚀 Release v$NEW_VERSION

- Updated version to $NEW_VERSION
- Built card for distribution
- Ready for HACS installation

Auto-generated by deploy script"

# Commit
log_info "Erstelle Commit..."
git commit -m "$COMMIT_MSG" || log_warning "Nichts zu committen oder Commit fehlgeschlagen"

# Prüfe Remote
if git remote get-url origin &> /dev/null; then
    REMOTE_URL=$(git remote get-url origin)
    log_info "Git Remote gefunden: $REMOTE_URL"
    
    # Push zum Main Branch
    CURRENT_BRANCH=$(git branch --show-current)
    log_info "Pushe zu Branch: $CURRENT_BRANCH"
    
    git push origin $CURRENT_BRANCH
    log_success "Code zu Git Repository gepusht!"
    
    # Erstelle Git Tag
    log_info "Erstelle Git Tag v$NEW_VERSION..."
    git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
    git push origin "v$NEW_VERSION"
    log_success "Git Tag erstellt und gepusht!"
    
    echo ""
    echo -e "${GREEN}🎉 DEPLOYMENT ERFOLGREICH! 🎉${NC}"
    echo ""
    echo "📦 Version: $NEW_VERSION"
    echo "🔗 Repository: $REMOTE_URL"
    echo "🏷️  Tag: v$NEW_VERSION"
    echo ""
    echo "📋 Nächste Schritte für HACS:"
    echo "1. Gehe zu deinem GitHub Repository"
    echo "2. Erstelle ein Release von Tag v$NEW_VERSION"
    echo "3. Lade ha-stundenplan-card.js als Asset hoch"
    echo "4. Füge Repository zu HACS als Custom Repository hinzu"
    echo ""
    echo "🔗 HACS Custom Repository URL:"
    echo "   $REMOTE_URL"
    echo ""
    
else
    log_warning "Kein Git Remote konfiguriert!"
    echo ""
    echo "🔧 Konfiguriere Git Remote:"
    echo "git remote add origin https://github.com/IHR-BENUTZERNAME/ha-stundenplan-card.git"
    echo ""
    echo "📤 Dann erneut ausführen:"
    echo "./deploy.sh"
fi

# GitHub CLI Integration (falls verfügbar)
if command -v gh &> /dev/null; then
    echo ""
    read -p "🚀 GitHub Release automatisch erstellen? (y/n): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log_info "Erstelle GitHub Release..."
        
        RELEASE_NOTES="## 🆕 Version $NEW_VERSION

### Features
- Konfigurierbare Stundenplan-Anzeige
- Server-URL, Username, Password und Höhe einstellbar
- Responsive Design mit Home Assistant Themes
- Grafischer Konfigurations-Editor

### Installation
1. Füge dieses Repository als Custom Repository zu HACS hinzu
2. Installiere 'Stundenplan Card' über HACS
3. Füge die Card zu deinem Dashboard hinzu

### Konfiguration
\`\`\`yaml
type: custom:ha-stundenplan-card
server: \"https://ihr-stundenplan-server.de\"
username: \"ihr-benutzername\"
password: \"ihr-passwort\"
height: 400
\`\`\`"

        gh release create "v$NEW_VERSION" \
            --title "🕐 Stundenplan Card v$NEW_VERSION" \
            --notes "$RELEASE_NOTES" \
            "dist/ha-stundenplan-card.js#Home Assistant Stundenplan Card"
            
        log_success "GitHub Release erstellt!"
        
        # HACS Repository Info
        echo ""
        echo -e "${BLUE}📋 HACS Repository Information:${NC}"
        REPO_URL=$(gh repo view --json url --jq .url)
        echo "Repository URL: $REPO_URL"
        echo "Category: Lovelace"
        echo "Type: JavaScript Module"
    fi
fi

echo ""
log_success "🎯 Deployment abgeschlossen!"